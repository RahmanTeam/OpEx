#!/bin/bash

# Print out message and write to log file
message () {
echo; printf '%.0s=' {1..80}; echo
echo "OpEx: $1"
printf '%.0s=' {1..80}; echo; echo
echo "$(date "+%d.%m.%Y %T") : $1" >> @NAME_opex_log.txt
}

# Check if files exist and terminate OpEx if required
checkFiles () {
for file in "$@"
do
    if ! [ -e $file ]
    then
	echo "OpEx error: $file does not exist."
	echo "Cannot proceed with this step. OpEx run terminated."
	echo "$(date "+%d.%m.%Y %T") : $file does not exist, cannot proceed. OpEx run terminated" >> @NAME_opex_log.txt
	exit
    fi
done
}


opexdir=@OPEXDIR

echo "$(date "+%d.%m.%Y %T") : Pipeline started" >> @NAME_opex_log.txt

# Mapping reads with BWA and Stampy, converting output to BAM file which is then sorted and indexed
message "Mapping reads, converting output to BAM file, sorting and indexing BAM"
checkFiles @FASTQ1 @FASTQ2
mkdir @NAME_tmp
$opexdir/tools/stampy-1.0.14.1/stampy.py --bwa=$opexdir/tools/bwa-0.5.10/bwa --bwaoptions="-q 10 @REFERENCE" -g @GENOME_INDEX -h @HASH --bwatmpdir=./@NAME_tmp -M @FASTQ1 @FASTQ2 | python $opexdir/tools/utils/toBAM.py | python $opexdir/tools/utils/sort.py @NAME; python $opexdir/tools/utils/index.py @NAME
@KEEPREMOVE

# Checking if number of reads is the same in the FASTQ files and in the BAM file
message "Comparing number of reads in FASTQ and BAM files"
checkFiles @FASTQ1 @NAME.bam
fastqr=$(echo $(zcat @FASTQ1 | wc -l)/2 | bc)
bamr=$(python $opexdir/tools/utils/bamreads.py @NAME.bam)
if [ $fastqr != $bamr ]; then echo FASTQ has $fastqr reads, BAM has $bamr reads; fi

# Duplicate marking by Picard
message "Duplicate marking"
checkFiles @NAME.bam
mkdir -p @NAME_tmp
java -Xmx4g -jar $opexdir/tools/picard-tools-1.48/MarkDuplicates.jar I=@NAME.bam O=@NAME_picard.bam METRICS_FILE=@NAME_picard_metrics.txt CREATE_INDEX=true TMP_DIR=./@NAME_tmp
@KEEPREMOVE

# Coverage checks
message "Checking coverage"
checkFiles @NAME_picard.bam
python $opexdir/tools/CoverView-v1.1.0/CoverView.py -i @NAME_picard.bam -o @NAME_coverview @MORECV

# Platypus
message "Variant calling"
checkFiles @NAME_picard.bam
export PYTHONPATH="$PYTHONPATH:@OPEXDIR:@OPEXDIR/pysamdir"
python $opexdir/tools/Platypus-0.1.5/Platypus.py callVariants --bamFiles=@NAME_picard.bam --refFile=@REFERENCE --output=@NAME_calls.vcf --logFileName=@NAME_platypus_log.txt

# CAVA
message "Variant annotation"
checkFiles @NAME_calls.vcf
python $opexdir/tools/cava-v1.1.1/cava.py -i @NAME_calls.vcf -c @CAVA_CONFIG -o @NAME_annotated_calls @MORECAVA

# Creating output txt file
message "Creating output txt file"
checkFiles @NAME_annotated_calls.vcf
python $opexdir/tools/utils/postCAVA.py @NAME_annotated_calls.vcf > @NAME_annotated_calls.txt

echo "$(date "+%d.%m.%Y %T") : Pipeline finished" >> @NAME_opex_log.txt
